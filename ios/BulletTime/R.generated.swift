//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "io.ltebean.bullettime") ?? Bundle.main
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `lineto-circular-black.ttf`.
    static let linetoCircularBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "lineto-circular-black", pathExtension: "ttf")
    /// Resource file `lineto-circular-bold.ttf`.
    static let linetoCircularBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "lineto-circular-bold", pathExtension: "ttf")
    /// Resource file `lineto-circular-book.ttf`.
    static let linetoCircularBookTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "lineto-circular-book", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "lineto-circular-black", withExtension: "ttf")`
    static func linetoCircularBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.linetoCircularBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "lineto-circular-bold", withExtension: "ttf")`
    static func linetoCircularBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.linetoCircularBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "lineto-circular-book", withExtension: "ttf")`
    static func linetoCircularBookTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.linetoCircularBookTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Circular-Black`.
    static let circularBlack = Rswift.FontResource(fontName: "Circular-Black")
    /// Font `Circular-Bold`.
    static let circularBold = Rswift.FontResource(fontName: "Circular-Bold")
    /// Font `Circular-Book`.
    static let circularBook = Rswift.FontResource(fontName: "Circular-Book")
    
    /// `UIFont(name: "Circular-Black", size: ...)`
    static func circularBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: circularBlack, size: size)
    }
    
    /// `UIFont(name: "Circular-Bold", size: ...)`
    static func circularBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: circularBold, size: size)
    }
    
    /// `UIFont(name: "Circular-Book", size: ...)`
    static func circularBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: circularBook, size: size)
    }
    
    static func validate() throws {
      if R.font.circularBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Circular-Black' could not be loaded, is 'lineto-circular-black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.circularBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Circular-Bold' could not be loaded, is 'lineto-circular-bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.circularBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Circular-Book' could not be loaded, is 'lineto-circular-book.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `button-save-as-video`.
    static let buttonSaveAsVideo = Rswift.ImageResource(bundle: R.hostingBundle, name: "button-save-as-video")
    /// Image `home-bg`.
    static let homeBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-bg")
    /// Image `icon-back-grey`.
    static let iconBackGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-back-grey")
    /// Image `icon-back-white`.
    static let iconBackWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-back-white")
    /// Image `icon-blue-tooth`.
    static let iconBlueTooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-blue-tooth")
    /// Image `icon-bluetooth`.
    static let iconBluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-bluetooth")
    /// Image `icon-confirm`.
    static let iconConfirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-confirm")
    /// Image `icon-delete`.
    static let iconDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-delete")
    /// Image `icon-feedback`.
    static let iconFeedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-feedback")
    /// Image `icon-gesture-1`.
    static let iconGesture1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-gesture-1")
    /// Image `icon-gesture-2`.
    static let iconGesture2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-gesture-2")
    /// Image `icon-gesture-3`.
    static let iconGesture3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-gesture-3")
    /// Image `icon-share-bold`.
    static let iconShareBold = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-share-bold")
    /// Image `icon-share-white`.
    static let iconShareWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-share-white")
    /// Image `icon-share`.
    static let iconShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-share")
    /// Image `icon-star`.
    static let iconStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-star")
    /// Image `icon-wifi`.
    static let iconWifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-wifi")
    /// Image `image-target`.
    static let imageTarget = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-target")
    /// Image `tab-album`.
    static let tabAlbum = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-album")
    /// Image `tab-shoot`.
    static let tabShoot = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-shoot")
    
    /// `UIImage(named: "button-save-as-video", bundle: ..., traitCollection: ...)`
    static func buttonSaveAsVideo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonSaveAsVideo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home-bg", bundle: ..., traitCollection: ...)`
    static func homeBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-back-grey", bundle: ..., traitCollection: ...)`
    static func iconBackGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBackGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-back-white", bundle: ..., traitCollection: ...)`
    static func iconBackWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBackWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-blue-tooth", bundle: ..., traitCollection: ...)`
    static func iconBlueTooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBlueTooth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-bluetooth", bundle: ..., traitCollection: ...)`
    static func iconBluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBluetooth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-confirm", bundle: ..., traitCollection: ...)`
    static func iconConfirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconConfirm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-delete", bundle: ..., traitCollection: ...)`
    static func iconDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-feedback", bundle: ..., traitCollection: ...)`
    static func iconFeedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFeedback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-gesture-1", bundle: ..., traitCollection: ...)`
    static func iconGesture1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGesture1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-gesture-2", bundle: ..., traitCollection: ...)`
    static func iconGesture2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGesture2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-gesture-3", bundle: ..., traitCollection: ...)`
    static func iconGesture3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGesture3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-share", bundle: ..., traitCollection: ...)`
    static func iconShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-share-bold", bundle: ..., traitCollection: ...)`
    static func iconShareBold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShareBold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-share-white", bundle: ..., traitCollection: ...)`
    static func iconShareWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShareWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-star", bundle: ..., traitCollection: ...)`
    static func iconStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-wifi", bundle: ..., traitCollection: ...)`
    static func iconWifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWifi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-target", bundle: ..., traitCollection: ...)`
    static func imageTarget(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageTarget, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-album", bundle: ..., traitCollection: ...)`
    static func tabAlbum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabAlbum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-shoot", bundle: ..., traitCollection: ...)`
    static func tabShoot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabShoot, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `FocusView`.
    static let focusView = _R.nib._FocusView()
    
    /// `UINib(name: "FocusView", in: bundle)`
    static func focusView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.focusView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<ProductCell> = Rswift.ReuseIdentifier(identifier: "cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `CentralViewController`, and contains static references to 1 segues.
    struct centralViewController {
      /// Segue identifier `camera`.
      static let camera: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CentralViewController, CameraViewController> = Rswift.StoryboardSegueIdentifier(identifier: "camera")
      
      /// Optionally returns a typed version of segue `camera`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func camera(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CentralViewController, CameraViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.centralViewController.camera, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeViewController`, and contains static references to 2 segues.
    struct homeViewController {
      /// Segue identifier `me`.
      static let me: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, MeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "me")
      /// Segue identifier `shoot`.
      static let shoot: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "shoot")
      
      /// Optionally returns a typed version of segue `me`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func me(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, MeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.me, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `shoot`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shoot(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.shoot, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PeripheralViewController`, and contains static references to 1 segues.
    struct peripheralViewController {
      /// Segue identifier `camera`.
      static let camera: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PeripheralViewController, CameraViewController> = Rswift.StoryboardSegueIdentifier(identifier: "camera")
      
      /// Optionally returns a typed version of segue `camera`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func camera(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PeripheralViewController, CameraViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.peripheralViewController.camera, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Me`.
    static let me = _R.storyboard.me()
    /// Storyboard `Shoot`.
    static let shoot = _R.storyboard.shoot()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Me", bundle: ...)`
    static func me(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.me)
    }
    
    /// `UIStoryboard(name: "Shoot", bundle: ...)`
    static func shoot(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.shoot)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _FocusView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FocusView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try shoot.validate()
      try me.validate()
      try home.validate()
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      static func validate() throws {
        if UIKit.UIImage(named: "tab-album") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab-album' is used in storyboard 'Home', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct me: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MeViewController
      
      let bundle = R.hostingBundle
      let name = "Me"
      let settings = StoryboardViewControllerResource<SettingsViewController>(identifier: "settings")
      
      func settings(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settings)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-delete' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-share' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-share-white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-share-white' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-star' is used in storyboard 'Me', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-feedback") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-feedback' is used in storyboard 'Me', but couldn't be loaded.") }
        if _R.storyboard.me().settings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settings' could not be loaded from storyboard 'Me' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct shoot: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let broadcast = StoryboardViewControllerResource<BroadcastViewController>(identifier: "broadcast")
      let bundle = R.hostingBundle
      let central = StoryboardViewControllerResource<CentralViewController>(identifier: "central")
      let discoveries = StoryboardViewControllerResource<DiscoveriesViewController>(identifier: "discoveries")
      let display = StoryboardViewControllerResource<DisplayViewController>(identifier: "display")
      let editor = StoryboardViewControllerResource<EditorViewController>(identifier: "editor")
      let name = "Shoot"
      let peripheral = StoryboardViewControllerResource<PeripheralViewController>(identifier: "peripheral")
      let picker = StoryboardViewControllerResource<PickerViewController>(identifier: "picker")
      
      func broadcast(_: Void = ()) -> BroadcastViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: broadcast)
      }
      
      func central(_: Void = ()) -> CentralViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: central)
      }
      
      func discoveries(_: Void = ()) -> DiscoveriesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: discoveries)
      }
      
      func display(_: Void = ()) -> DisplayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: display)
      }
      
      func editor(_: Void = ()) -> EditorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editor)
      }
      
      func peripheral(_: Void = ()) -> PeripheralViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: peripheral)
      }
      
      func picker(_: Void = ()) -> PickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: picker)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-confirm") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-confirm' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-share-bold") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-share-bold' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image-target") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image-target' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home-bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home-bg' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-back-grey") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-back-grey' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-blue-tooth") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-blue-tooth' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-back-white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-back-white' is used in storyboard 'Shoot', but couldn't be loaded.") }
        if _R.storyboard.shoot().central() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'central' could not be loaded from storyboard 'Shoot' as 'CentralViewController'.") }
        if _R.storyboard.shoot().display() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'display' could not be loaded from storyboard 'Shoot' as 'DisplayViewController'.") }
        if _R.storyboard.shoot().editor() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editor' could not be loaded from storyboard 'Shoot' as 'EditorViewController'.") }
        if _R.storyboard.shoot().peripheral() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'peripheral' could not be loaded from storyboard 'Shoot' as 'PeripheralViewController'.") }
        if _R.storyboard.shoot().broadcast() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'broadcast' could not be loaded from storyboard 'Shoot' as 'BroadcastViewController'.") }
        if _R.storyboard.shoot().picker() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'picker' could not be loaded from storyboard 'Shoot' as 'PickerViewController'.") }
        if _R.storyboard.shoot().discoveries() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'discoveries' could not be loaded from storyboard 'Shoot' as 'DiscoveriesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}